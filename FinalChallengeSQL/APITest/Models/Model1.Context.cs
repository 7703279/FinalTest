//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace APITest.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DADEntities1 : DbContext
    {
        public DADEntities1()
            : base("name=DADEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Interest> Interests { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Record> Records { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual int ADD_CUSTOMER(Nullable<int> custNo, string custName, string custAddress, Nullable<int> custPcode, string interestCode)
        {
            var custNoParameter = custNo.HasValue ?
                new ObjectParameter("CustNo", custNo) :
                new ObjectParameter("CustNo", typeof(int));
    
            var custNameParameter = custName != null ?
                new ObjectParameter("CustName", custName) :
                new ObjectParameter("CustName", typeof(string));
    
            var custAddressParameter = custAddress != null ?
                new ObjectParameter("CustAddress", custAddress) :
                new ObjectParameter("CustAddress", typeof(string));
    
            var custPcodeParameter = custPcode.HasValue ?
                new ObjectParameter("CustPcode", custPcode) :
                new ObjectParameter("CustPcode", typeof(int));
    
            var interestCodeParameter = interestCode != null ?
                new ObjectParameter("InterestCode", interestCode) :
                new ObjectParameter("InterestCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ADD_CUSTOMER", custNoParameter, custNameParameter, custAddressParameter, custPcodeParameter, interestCodeParameter);
        }
    }
}
