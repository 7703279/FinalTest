/*
Deployment script for FinalChallengeSQL

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "FinalChallengeSQL"
:setvar DefaultFilePrefix "FinalChallengeSQL"
:setvar DefaultDataPath "C:\Users\kim22\AppData\Local\Microsoft\VisualStudio\SSDT\FinalChallengeSQL"
:setvar DefaultLogPath "C:\Users\kim22\AppData\Local\Microsoft\VisualStudio\SSDT\FinalChallengeSQL"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = AUTO, OPERATION_MODE = READ_WRITE) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key d2da95bc-ca1c-4142-912f-0904bcd65bd3, f99df138-026f-49ee-94d9-393cc0b99f93 is skipped, element [dbo].[Table4].[Id] (SqlSimpleColumn) will not be renamed to RecordID';


GO
PRINT N'Rename refactoring operation with key 6c572d08-eff6-4cdf-81d1-d2c762e83aa0 is skipped, element [dbo].[Table4].[RecordPrice] (SqlSimpleColumn) will not be renamed to Title';


GO
PRINT N'Rename refactoring operation with key 60aebaa1-82f9-4913-910a-1a1449b7d5ed is skipped, element [dbo].[Table1].[Id] (SqlSimpleColumn) will not be renamed to CustNo';


GO
PRINT N'Rename refactoring operation with key 5952c908-fe8a-484c-a8d9-bdb26d366283 is skipped, element [dbo].[Table2].[Id] (SqlSimpleColumn) will not be renamed to InterestCode';


GO
PRINT N'Rename refactoring operation with key 2812d135-e569-4f8b-8ad8-387f28480f86 is skipped, element [dbo].[Table3].[Id] (SqlSimpleColumn) will not be renamed to CustNo';


GO
PRINT N'Creating [dbo].[Customer]...';


GO
CREATE TABLE [dbo].[Customer] (
    [CustNo]       INT           NOT NULL,
    [CustName]     NVARCHAR (50) NOT NULL,
    [CustAddress]  NVARCHAR (50) NOT NULL,
    [CustPcode]    INT           NOT NULL,
    [InterestCode] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([CustNo] ASC)
);


GO
PRINT N'Creating [dbo].[Interest]...';


GO
CREATE TABLE [dbo].[Interest] (
    [InterestCode] NVARCHAR (50) NOT NULL,
    [InterestDesc] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([InterestCode] ASC)
);


GO
PRINT N'Creating [dbo].[Order]...';


GO
CREATE TABLE [dbo].[Order] (
    [CustNo]      INT           NOT NULL,
    [RecordID]    NVARCHAR (50) NOT NULL,
    [DateOrdered] DATE          NOT NULL,
    [Price]       MONEY         NOT NULL,
    PRIMARY KEY CLUSTERED ([CustNo] ASC, [RecordID] ASC, [DateOrdered] ASC)
);


GO
PRINT N'Creating [dbo].[Record]...';


GO
CREATE TABLE [dbo].[Record] (
    [RecordID]  NVARCHAR (50) NOT NULL,
    [Title]     NVARCHAR (50) NOT NULL,
    [Performer] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([RecordID] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Customer]...';


GO
ALTER TABLE [dbo].[Customer] WITH NOCHECK
    ADD FOREIGN KEY ([InterestCode]) REFERENCES [dbo].[Interest] ([InterestCode]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Order]...';


GO
ALTER TABLE [dbo].[Order] WITH NOCHECK
    ADD FOREIGN KEY ([CustNo]) REFERENCES [dbo].[Customer] ([CustNo]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Order]...';


GO
ALTER TABLE [dbo].[Order] WITH NOCHECK
    ADD FOREIGN KEY ([RecordID]) REFERENCES [dbo].[Record] ([RecordID]);


GO
PRINT N'Creating [dbo].[ADD_CUSTOMER]...';


GO
CREATE PROCEDURE [dbo].[ADD_CUSTOMER]
	@CustNo int,
	@CustName nvarchar(50),
	@CustAddress nvarchar(50),
	@CustPcode int,
	@InterestCode nvarchar(50)
AS
	BEGIN
		INSERT INTO Customer(CustNo, CustName, CustAddress, CustPcode, InterestCode) VALUES (@CustNo, @CustName, @CustAddress, @CustPcode, @InterestCode);
	END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd2da95bc-ca1c-4142-912f-0904bcd65bd3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d2da95bc-ca1c-4142-912f-0904bcd65bd3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f99df138-026f-49ee-94d9-393cc0b99f93')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f99df138-026f-49ee-94d9-393cc0b99f93')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6c572d08-eff6-4cdf-81d1-d2c762e83aa0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6c572d08-eff6-4cdf-81d1-d2c762e83aa0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '60aebaa1-82f9-4913-910a-1a1449b7d5ed')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('60aebaa1-82f9-4913-910a-1a1449b7d5ed')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5952c908-fe8a-484c-a8d9-bdb26d366283')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5952c908-fe8a-484c-a8d9-bdb26d366283')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2812d135-e569-4f8b-8ad8-387f28480f86')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2812d135-e569-4f8b-8ad8-387f28480f86')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO INTEREST VALUES ('RR', 'Rock and Roll');
INSERT INTO INTEREST VALUES ('JA', 'Jazz');
INSERT INTO INTEREST VALUES ('RB', 'Rhythm and Blues');

INSERT INTO CUSTOMER VALUES (123, 'Freddie Mercury', '1 Sesame Street',	3000,	'RR');
INSERT INTO CUSTOMER VALUES (456, 'Brian May', '10 Downing Street',	4000,	'JA');
INSERT INTO CUSTOMER VALUES (789, 'John Deacon', '221B Baker Street',	5000,	'RB');
INSERT INTO CUSTOMER VALUES (234, 'Roger Taylor', 'LG1 College Cres, Parkville',	6000,	'RR');
INSERT INTO CUSTOMER VALUES (567, 'Mike', '1 Adelaide Avenue',	7000,	'RB');

INSERT INTO RECORD VALUES ('PF003', 'The Wall', 'Pink Floyd');
INSERT INTO RECORD VALUES ('IX002', 'Kick', 'INXS');
INSERT INTO RECORD VALUES ('SP069', 'Never Mind the Bollocks', 'Sex Pistols');
INSERT INTO RECORD VALUES ('PF002', 'The Dark Side of the Moon', 'Pink Floyd');
INSERT INTO RECORD VALUES ('IX005', 'Shabooh Shoobah', 'INXS');
INSERT INTO RECORD VALUES ('SP070', 'Floggin a Dead Horse', 'Sex Pistols');
INSERT INTO RECORD VALUES ('PF004', 'The Endless River', 'Pink Floyd');
INSERT INTO RECORD VALUES ('PF006', 'Wish You Were Here', 'Pink Floyd');
INSERT INTO RECORD VALUES ('SP075', 'Agents of Anarchy', 'Sex Pistols');
INSERT INTO RECORD VALUES ('PF007', 'The Division Bell', 'Pink Floyd');

INSERT INTO [Order] VALUES (123, 'PF003', '01-Dec-19', 30.00);
INSERT INTO [Order] VALUES (123, 'IX002', '01-Dec-19', 29.95);
INSERT INTO [Order] VALUES (123, 'SP069', '02-Dec-19', 12.45);
INSERT INTO [Order] VALUES (123, 'IX002', '05-Dec-19', 30.00);
INSERT INTO [Order] VALUES (456, 'PF002', '01-Dec-19', 31.00);
INSERT INTO [Order] VALUES (456, 'X005', '03-Dec-19', 28.95);
INSERT INTO [Order] VALUES (456, 'SP070', '06-Dec-19', 13.45);
INSERT INTO [Order] VALUES (789, 'PF004', '02-Dec-19', 29.00);
INSERT INTO [Order] VALUES (789, 'IX002', '05-Dec-19', 29.95);
INSERT INTO [Order] VALUES (234, 'PF006', '01-Dec-19', 45.00);
INSERT INTO [Order] VALUES (234, 'SP075', '04-Dec-19', 5.67);
INSERT INTO [Order] VALUES (567, 'PF007', '03-Dec-19', 9.95);
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Customer'), OBJECT_ID(N'dbo.Order'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
